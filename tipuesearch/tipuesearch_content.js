var tipuesearch = {"pages":[{"title":" popen-fortran ","text":"popen-fortran Simple Fortran module for popen . Example The library provides a routine get_command_as_string which can be used like so: program main use popen_module , only : get_command_as_string implicit none character ( len = :), allocatable :: res res = get_command_as_string ( 'ls -l' ) write ( * , '(A)' ) res end program main Documentation The latest API documentation can be found here . This was generated from the source code using FORD (i.e. by running ford ford.md ). Compiling The library can be compiled with recent versions the Intel Fortran Compiler and GFortran (and presumably any other Fortran compiler that supports modern standards). A fmp.toml file is provided for compiling popen-fortran with the Fortran Package Manager . For example, to build: fpm build --profile release To run the unit tests: fpm test --profile release To use popen-fortran within your fpm project, add the following to your fpm.toml file: [dependencies] popen-fortran = { git = \"https://github.com/jacobwilliams/popen-fortran.git\" } or, to use a specific version: [dependencies] popen-fortran = { git = \"https://github.com/jacobwilliams/popen-fortran.git\" , tag = \"1.0.0\" } See also Fortran & C Interoperability [degenerateconic.com] (2014) C interop to popen , comp.lang.fortran, 12/2/2009. M_process Read or write to a process from Fortran via a C wrapper Developer Info Jacob Williams","tags":"home","loc":"index.html"},{"title":"c2f_string – popen-fortran","text":"public  function c2f_string(c) result(f) Convert a C string to a Fortran string. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c C string Return Value character(len=:), allocatable Fortran string Called by proc~~c2f_string~~CalledByGraph proc~c2f_string c2f_string proc~get_command_as_string get_command_as_string proc~get_command_as_string->proc~c2f_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents Source Code c2f_string Source Code function c2f_string ( c ) result ( f ) character ( len =* ), intent ( in ) :: c !! C string character ( len = :), allocatable :: f !! Fortran string integer :: i i = index ( c , c_null_char ) if ( i <= 0 ) then f = c else if ( i == 1 ) then f = '' else if ( i > 1 ) then f = c ( 1 : i - 1 ) end if end function c2f_string","tags":"","loc":"proc/c2f_string.html"},{"title":"get_command_as_string – popen-fortran","text":"public  function get_command_as_string(command) result(str) Return the result of the command as a string. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: command the command to run Return Value character(len=:), allocatable the result of that command Calls proc~~get_command_as_string~~CallsGraph proc~get_command_as_string get_command_as_string interface~fgets fgets proc~get_command_as_string->interface~fgets interface~pclose pclose proc~get_command_as_string->interface~pclose interface~popen popen proc~get_command_as_string->interface~popen proc~c2f_string c2f_string proc~get_command_as_string->proc~c2f_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents Source Code get_command_as_string Source Code function get_command_as_string ( command ) result ( str ) character ( len =* ), intent ( in ) :: command !! the command to run character ( len = :), allocatable :: str !! the result of that command integer , parameter :: buffer_length = 1000 !! read stream in chunks of this size type ( c_ptr ) :: h !! for `popen` integer ( c_int ) :: istat !! `pclose` status character ( kind = c_char , len = buffer_length ) :: line !! buffer to read from `fgets` str = '' h = c_null_ptr h = popen ( command // c_null_char , 'r' // c_null_char ) if ( c_associated ( h )) then do while ( c_associated ( fgets ( line , buffer_length , h ))) str = str // c2f_string ( line ) end do istat = pclose ( h ) end if end function get_command_as_string","tags":"","loc":"proc/get_command_as_string.html"},{"title":"popen – popen-fortran","text":"interface Called by interface~~popen~~CalledByGraph interface~popen popen proc~get_command_as_string get_command_as_string proc~get_command_as_string->interface~popen Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. private  function popen(command, mode) bind(C,name='popen') Arguments Type Intent Optional Attributes Name character(kind=c_char, len=1), dimension(*) :: command character(kind=c_char, len=1), dimension(*) :: mode Return Value type(c_ptr) Description initiate pipe streams to or from a process","tags":"","loc":"interface/popen.html"},{"title":"fgets – popen-fortran","text":"interface Called by interface~~fgets~~CalledByGraph interface~fgets fgets proc~get_command_as_string get_command_as_string proc~get_command_as_string->interface~fgets Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. private  function fgets(s, siz, stream) bind(C,name='fgets') Arguments Type Intent Optional Attributes Name character(kind=c_char, len=1), dimension(*) :: s integer(kind=c_int), value :: siz type(c_ptr), value :: stream Return Value type(c_ptr) Description get a string from a stream","tags":"","loc":"interface/fgets.html"},{"title":"pclose – popen-fortran","text":"interface Called by interface~~pclose~~CalledByGraph interface~pclose pclose proc~get_command_as_string get_command_as_string proc~get_command_as_string->interface~pclose Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. private  function pclose(stream) bind(C,name='pclose') Arguments Type Intent Optional Attributes Name type(c_ptr), value :: stream Return Value integer(kind=c_int) Description close a pipe stream to or from a process","tags":"","loc":"interface/pclose.html"},{"title":"popen_module – popen-fortran","text":"A simple module for popen . Uses iso_c_binding module~~popen_module~~UsesGraph module~popen_module popen_module iso_c_binding iso_c_binding module~popen_module->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Interfaces popen fgets pclose Functions c2f_string get_command_as_string Interfaces interface private  function popen(command, mode) bind(C,name='popen') initiate pipe streams to or from a process Arguments Type Intent Optional Attributes Name character(kind=c_char, len=1), dimension(*) :: command character(kind=c_char, len=1), dimension(*) :: mode Return Value type(c_ptr) interface private  function fgets(s, siz, stream) bind(C,name='fgets') get a string from a stream Arguments Type Intent Optional Attributes Name character(kind=c_char, len=1), dimension(*) :: s integer(kind=c_int), value :: siz type(c_ptr), value :: stream Return Value type(c_ptr) interface private  function pclose(stream) bind(C,name='pclose') close a pipe stream to or from a process Arguments Type Intent Optional Attributes Name type(c_ptr), value :: stream Return Value integer(kind=c_int) Functions public  function c2f_string (c) result(f) Convert a C string to a Fortran string. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c C string Return Value character(len=:), allocatable Fortran string public  function get_command_as_string (command) result(str) Return the result of the command as a string. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: command the command to run Return Value character(len=:), allocatable the result of that command","tags":"","loc":"module/popen_module.html"},{"title":"popen_module.f90 – popen-fortran","text":"Contents Modules popen_module Source Code popen_module.f90 Source Code !******************************************************************************* !> ! A simple module for `popen`. module popen_module use , intrinsic :: iso_c_binding implicit none private ! interfaces to C functions interface function popen ( command , mode ) bind ( C , name = 'popen' ) !! initiate pipe streams to or from a process import :: c_char , c_ptr implicit none character ( kind = c_char ), dimension ( * ) :: command character ( kind = c_char ), dimension ( * ) :: mode type ( c_ptr ) :: popen end function popen function fgets ( s , siz , stream ) bind ( C , name = 'fgets' ) !! get a string from a stream import :: c_char , c_ptr , c_int implicit none type ( c_ptr ) :: fgets character ( kind = c_char ), dimension ( * ) :: s integer ( kind = c_int ), value :: siz type ( c_ptr ), value :: stream end function fgets function pclose ( stream ) bind ( C , name = 'pclose' ) !! close a pipe stream to or from a process import :: c_ptr , c_int implicit none integer ( c_int ) :: pclose type ( c_ptr ), value :: stream end function pclose end interface public :: c2f_string , get_command_as_string contains !******************************************************************************* !> !  Convert a C string to a Fortran string. function c2f_string ( c ) result ( f ) character ( len =* ), intent ( in ) :: c !! C string character ( len = :), allocatable :: f !! Fortran string integer :: i i = index ( c , c_null_char ) if ( i <= 0 ) then f = c else if ( i == 1 ) then f = '' else if ( i > 1 ) then f = c ( 1 : i - 1 ) end if end function c2f_string !******************************************************************************* !> !  Return the result of the command as a string. function get_command_as_string ( command ) result ( str ) character ( len =* ), intent ( in ) :: command !! the command to run character ( len = :), allocatable :: str !! the result of that command integer , parameter :: buffer_length = 1000 !! read stream in chunks of this size type ( c_ptr ) :: h !! for `popen` integer ( c_int ) :: istat !! `pclose` status character ( kind = c_char , len = buffer_length ) :: line !! buffer to read from `fgets` str = '' h = c_null_ptr h = popen ( command // c_null_char , 'r' // c_null_char ) if ( c_associated ( h )) then do while ( c_associated ( fgets ( line , buffer_length , h ))) str = str // c2f_string ( line ) end do istat = pclose ( h ) end if end function get_command_as_string !******************************************************************************* end module popen_module !*******************************************************************************","tags":"","loc":"sourcefile/popen_module.f90.html"}]}